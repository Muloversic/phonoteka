scalar DateTime

# Track type
type Track {
  id: Int
  name: String
  createdAt: DateTime
  releaseDate: DateTime
  description: String
  genre: String
  videoUrl: String
  format: String
  band: Band
}

# Track input
input TrackInput {
  name: String!
  releaseDate: DateTime
  description: String
  genre: String
  videoUrl: String
  format: String!
  bandId: Int!
}

# Band type
type Band {
  id: Int
  name: String
  createdAt: DateTime
  foundationDate: DateTime
  genre: [String]
  description: String
  image: String
  tracks: [Track]
}

# Band input
input BandInput {
  name: String!
  foundationDate: DateTime
  genre: [String!]!
  description: String
  image: String
}

# Band input
input UserInput {
  name: String!
  imgUrl: String
  email: String!
}

#User ============================
type User {
  id: Int!
  email: String!
  password: String!
  name: String
  imgUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AuthResponse {
  token: String!
  refreshToken: String!
}

# End of User definitions ============================

type Query {
  getBandById(id: Int): Band
  getTrackById(id: Int): Track
  getUserById: User
  getAllBands: [Band]
  getAllTracks: [Track]
  getTrackByQuery(bandId: Int): [Track]
}

type Mutation {
  createBand(input: BandInput!): Band
  updateUser(input: UserInput!): User
  createTrack(input: TrackInput!): Track
  login(email: String!, password: String!): AuthResponse
  register(email: String!, username: String!, password: String!, rePassword: String!): AuthResponse
}
