scalar DateTime

# Track type
type Track {
  id: Int
  name: String
  userId: Int
  createdAt: DateTime
  year: DateTime
  album: String
  genre: String
  url: String
  format: String
  band: Band
  bandId: Int
}

type DeletedTracks {
  count: Int
}

# Track input
input TrackInput {
  name: String!
  year: DateTime!
  album: String!
  genre: String
  url: String
  format: String!
}

input CreateTracksInput {
  tracks: [TrackInput]
  bandId: Int
}

input UpdateTrackInput {
  tracks: [TrackInput]
  bandId: Int
  trackId: Int
}

input UpdateTracksInBandInput {
  id: Int
  bandId: Int
  userId: Int
  name: String!
  year: DateTime!
  createdAt: DateTime
  album: String!
  genre: String
  url: String
  format: String!
}

# Band type
type Band {
  id: Int
  name: String
  userId: Int
  createdAt: DateTime
  foundationDate: DateTime
  genre: String
  members: String
  description: String
  about: String
  location: String
  image: String
  tracks: [Track]
}

# Band input
input BandInput {
  name: String!
  foundationDate: DateTime!
  description: String
  members: String!
  about: String
  location: String
  tracks: [TrackInput!]
  image: String
}

input UpdateBandInput {
  id: Int
  name: String!
  foundationDate: DateTime!
  description: String
  members: String!
  about: String
  location: String
  tracks: [UpdateTracksInBandInput!]
  image: String
}

# Band input
input UserInput {
  name: String!
  imgUrl: String
  email: String!
}

#User ============================
type User {
  id: Int!
  email: String!
  password: String!
  name: String
  imgUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AuthResponse {
  token: String!
  refreshToken: String!
}

type TracksQuery {
  tracks: [Track]
  allTracksCount: Int
}

type ChartGenreData {
  value: Int
  label: String
  id: Int
}

type ChartDataResponse {
  tracksAmount: Int
  genreData: [ChartGenreData]
}

# End of User definitions ============================

type Query {
  getBandById(id: Int): Band
  getUserById: User
  getAllBands: [Band]
  getChartData: ChartDataResponse
  getAllTracks(
    order: String
    sortBy: String
    search: String
    pageSize: Int
    pageNumber: Int
  ): TracksQuery
}

type Mutation {
  createBand(input: BandInput!): Band
  updateBand(input: UpdateBandInput!): Band
  updateUser(input: UserInput!): User
  createTracks(input: CreateTracksInput!): [Track]
  deleteTracks(ids: [Int]!): DeletedTracks
  updateTrack(input: UpdateTrackInput!): [Track]
  login(email: String!, password: String!): AuthResponse
  register(email: String!, username: String!, password: String!, rePassword: String!): AuthResponse
}
